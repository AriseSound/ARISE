#!/sbin/sh
#
# ARISE Sound Systems™ @XDA Developers
#
# Deuteronomy™
#
# www.arisesound.com

OUTFD=/proc/self/fd/$2;

ui_print() { echo -e "ui_print $1\nui_print" > $OUTFD; }

safe_mount() {
	IS_MOUNTED=$(cat /proc/mounts | grep "$1")
	if [ "$IS_MOUNTED" ]; then
  mount -o remount,rw $1
 else
  mount $1
	fi

}

safe_mount /system
safe_mount /data

if [ -d "/system/system" ]; then
  SYSTEM=/system/system
else
  SYSTEM=/system
fi

if [ -d "/vendor" ]; then
  safe_mount /vendor
  VENDOR=/vendor
else
  VENDOR=$SYSTEM/vendor
fi

set_perm() {
 if [ -e $1 ]; then
  chown $2:$3 $1 || exit 1
  chmod $4 $1 || exit 1
  if [ "$5" ]; then
  chcon $5 $1 2>/dev/null
  else
  chcon 'u:object_r:system_file:s0' $1 2>/dev/null
  fi
 fi
}

set_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $4 $6
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $2 $3 $5 $6
  done
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  if [ -z "$FILES" ]; then
    FILES='$SYS/build.prop'
  fi
  cat $FILES 2>/dev/null | sed -n $REGEX | head -n 1
}

ZIPFILE="$3";
DIR=$(dirname "$ZIPFILE");
ZIP=$3
ARISE=/tmp/zip
VETC=$VENDOR/etc
VLIB=$VENDOR/lib
APP=$SYSTEM/app
DRC=$SYSTEM/etc/drc
ETC=$SYSTEM/etc
FW=$SYSTEM/framework
LIB=$SYSTEM/lib
LIB64=$SYSTEM/lib64
PAPP=$SYSTEM/priv-app
PERM=$SYSTEM/etc/permissions
SUD=$SYSTEM/su.d
SURR=$SYSTEM/etc/surround_sound_3mic
SFX=$SYSTEM/lib/soundfx
SFX64=$SYSTEM/lib64/soundfx
DEUTFX=$SYSTEM/lib/soundfx/deuteronomy 
ASUSFX=$SYSTEM/lib/soundfx/asus
ASUSFX64=$SYSTEM/lib64/soundfx/asus
SONYFX=$SYSTEM/lib/soundfx/sony
SONYFX64=$SYSTEM/lib64/soundfx/sony
V4ARM=$SYSTEM/priv-app/ViPER4Arise/lib/arm
V4A86=$SYSTEM/priv-app/ViPER4Arise/lib/x86
QCOM=$SYSTEM/lib/soundfx/libqcomvisualizer.so
DAPP=/data/app
DATA=/data/data
CAPP=customize/app
CETC=customize/etc
CAFX=customize/audio_effects
CLIB=customize/lib
CARM=customize/lib/armeabi
CARM64=customize/lib64/armeabi
CLIB86=customize/lib/x86
CLIB8664=customize/lib64/x86_64
CVLIB=customize/vendor/lib
CSUD=customize/su.d
V4A=ViPER4Arise
V4APK=ViPER4Arise.apk
V4ALIB=libv4a_fx_ics.so
V4AUTIL=libV4AJniUtils.so
ARK=ArkamysAudio
ARKAPK=ArkamysAudio.apk
ARKUSER=/data/app/com.arkamys.audio-1
ARKDATA=/data/user/0/com.arkamys.audio
DAP=$VENDOR/lib/libhwdaphal.so
SRS=libsrsprocessing.so
QCPROC=libqcompostprocbundle.so
APTXV7A=libaptX-1.0.0-rel-Android21-ARMv7A.so
AFX=AudioFX
DSP=DSPManager
AEC=audio_effects.conf
AECBAK=audio_effects.conf.backup
AEV=audio_effects_vendor.conf
AOE=audio_offload_effects.conf
POL=audio_policy.conf
POLBAK=audio_policy.conf.backup
APC=audio_policy_configuration.xml
APCBAK=audio_policy_configuration.xml.backup
AOP=audio_outout_policy.conf
AOPBAK=audio_output_policy.conf.backup
PROP=arisesound_setprop
SERVER=arisesoundserver
WISHLIST=/sdcard/arise_addon.prop
HTC=htc_audio_effects.conf
HUAWEI=$(grep_prop ro.product.manufacturer=HUAWEI)
ANGLER=$(grep_prop ro.product.brand=angler)
SONY=$(grep_prop ro.product.brand=Sony)
BUFFER=$(cat /sdcard/arise_addon.prop | grep "del.deep_buffer=true")
PERMISSIVE=$(cat /sdcard/arise_addon.prop | grep "set.permissive=true")
SP=set_perm
SPR=set_perm_recursive

API=$(grep_prop ro.build.version.sdk)
ABI=$(grep_prop ro.product.cpu.abi | cut -c-3)
ABI2=$(grep_prop ro.product.cpu.abi2 | cut -c-3)
ABILONG=$(grep_prop ro.product.cpu.abi)

ARCH=arm
64BIT=false

if [ "$ABI" = "x86" ]; then
  ARCH=x86
fi

if [ "$ABI2" = "x86" ]; then
  ARCH=x86
fi

if [ "$ABILONG" = "arm64-v8a" ]; then
  ARCH=arm64
  64BIT=true
fi

if [ "$ABILONG" = "x86_64" ]; then
  ARCH=x64
  64BIT=true
fi

ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print "                  Deuteronomy™"
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "

sleep 4

rm -rf $PAPP/$V4A
rm -rf $APP/$V4A
rm -rf $PAPP/ViPER4ARISE
rm -rf $APP/Viper4ARISE
rm -rf $PAPP/ViPER4Android_FX_A4.x
rm -rf $APP/ViPER4Android_FX_A4.x
rm -rf $PAPP/ViPER4Android_FX
rm -rf $APP/ViPER4Android_FX
rm -rf $PAPP/ViPER4Android
rm -rf $APP/ViPER4Android
rm -rf $PAPP/Viper4Android
rm -rf $PAPP/V4A_FX
rm -rf $APP/V4A_FX
rm -rf $PAPP/Viper4androidFX-2.4.0.1
rm -rf $APP/Viper4androidFX-2.4.0.1
rm -rf $PAPP/$AFX
rm -rf $APP/$AFX
rm -rf $PAPP/$DSP
rm -rf $APP/$DSP
rm -rf $APP/$ARK
rm -rf $APP/$ICE
rm -rf $ARKUSER
rm -rf $ARKDATA
rm -rf $DAPP/com.vipercn.viper4android_v2-1
rm -rf $DAPP/com.vipercn.viper4android_v2-2
rm -rf $DATA/com.vipercn.viper4android_v2
rm -f $PAPP/$V4APK
rm -f $APP/$V4APK
rm -f $PAPP/ViPER4ARISE.apk
rm -f $APP/Viper4ARISE.apk
rm -f $PAPP/ViPER4Android_FX.apk
rm -f $APP/ViPER4Android_FX.apk
rm -f $PAPP/ViPER4Android_FX_A4.x.apk
rm -f $APP/ViPER4Android_FX_A4.x.apk
rm -f $PAPP/ViPER4Android.apk
rm -f $APP/ViPER4Android.apk
rm -f $SFX/$V4ALIB
rm -f $SFX/libv4a_fx_jb.so
rm -f $LIB/$V4ALIB
rm -f $LIB/libv4a_fx_jb.so
rm -f $SFX/$V4AUTIL
rm -f $LIB/$V4AUTIL
rm -f $SYSTEM/ARISE_Version.prop
rm -f $SYSTEM/addon.d/blacklist
rm -f $SYSTEM/addon.d/50-rr.sh

if [ "$BUFFER" ]; then
  if [ -f "$ETC/$POL" ]; then
    if [ -e "$ETC/$POLBAK" ]; then
      sed -i '/deep_buffer {/,/}/d' $ETC/$POL
      sed -i '/raw {/,/}/d' $ETC/$POL
    else
      cp $ETC/$POL $ETC/$POLBAK
      sed -i '/deep_buffer {/,/}/d' $ETC/$POL
      sed -i '/raw {/,/}/d' $ETC/$POL
    fi
  fi
  if [ -f "$ETC/$AOP" ]; then
    if [ -e "$ETC/$AOPBAK" ]; then
      sed -i '/deep_buffer {/,/}/d' $ETC/$AOP
      sed -i '/raw {/,/}/d' $ETC/$AOP
    else
      cp $ETC/$AOP $ETC/$AOPBAK
      sed -i '/deep_buffer {/,/}/d' $ETC/$AOP
      sed -i '/raw {/,/}/d' $ETC/$AOP
    fi
  fi
  if [ -f "$VETC/$POL" ]; then
    if [ -e "$SVETC/$POLBAK" ]; then
      sed -i '/deep_buffer {/,/}/d' $VETC/$POL
      sed -i '/raw {/,/}/d' $VETC/$POL
    else
      cp $VETC/$POL $SVETC/$POLBAK
      sed -i '/deep_buffer {/,/}/d' $VETC/$POL
      sed -i '/raw {/,/}/d' $VETC/$POL
    fi
  fi
  if [ -f "$VETC/$POL" ]; then
    if [ -e "$VETC/$POLBAK" ]; then
      sed -i '/deep_buffer {/,/}/d' $VETC/$POL
      sed -i '/raw {/,/}/d' $VETC/$POL
    else
      cp $VETC/$POL $VETC/$POLBAK
      sed -i '/deep_buffer {/,/}/d' $VETC/$POL
      sed -i '/raw {/,/}/d' $VETC/$POL
    fi
  fi
  if [ -f "$ETC/$APC" ]; then
    if [ -e "$ETC/$APCBAK" ]; then
      sed -i 's/deep_buffer,//g' $ETC/$APC
    else
      cp $ETC/$APC $ETC/$APCBAK
      sed -i 's/deep_buffer,//g' $ETC/$APC
    fi
  fi
fi

rm -rf $ARISE
mkdir $ARISE
cd $ARISE
unzip -o "$ZIP"

if [ ! -e "$VLIB/$SRS" ]; then
  if [ ! -e "$LIB/$SRS" ]; then
    cp $CARM/$SRS $LIB/$SRS
    $SP $LIB/$SRS 0 0 0644
  fi
fi

if [ ! -e "$LIB/$APTXV7A" ]; then
  cp $CARM/$APTXV7A $LIB/$APTXV7A
  $SP $LIB/$APTXV7A 0 0 0644
fi

if [ -f "$ETC/$AEC" ]; then
  if [ -e "$QCOM" ]; then
    cp $CAFX/qc/$AEC $ETC/$AEC
  else
    cp $CAFX/aosp/$AEC $ETC/$AEC
  fi
fi

if [ -f "$VETC/$AEC" ]; then
  if [ -e "$QCOM" ]; then
    cp -f $CAFX/qc/$AEC $VETC/$AEC
    cp $CAFX/aosp/$AEC $ETC/$AEC
  else
    cp -f $CAFX/aosp/$AEC $VETC/$AEC
  fi
fi

if [ -f "$ETC/$HTC" ]; then
  cp $CAFX/htc/$HTC $ETC/$HTC
  cp $CAFX/qc/$AEC $ETC/$AEC
  $SP $ETC/$HTC 0 0 0644
fi

if [ -f "$ETC/$AEV" ]; then
  if [ -e "$QCOM" ]; then
    cp $CAFX/qc/$AEC $ETC/$AEV
  else
    cp $CAFX/aosp/$AEC $ETC/$AEV
  fi
  $SP $ETC/$AEV 0 0 0644
fi

if [ -f "$VETC/$AOE" ]; then
  if [ -e "$QCOM" ]; then
    cp $CAFX/qc/$AEC $VETC/$AOE
  else
    cp $CAFX/aosp/$AEC $VETC/$AOE
  fi
  $SP $VETC/$AOE 0 0 0644
fi

if [ "$SONY" ]; then
  cp $CAFX/sony/$AEC $ETC/$AEC
  cp $CAFX/sony/$AEC $VETC/$AEC
fi

if [ "$HUAWEI" ]; then
  if [ ! "$ANGLER" ]; then
    cp $CAFX/huawei/$AEC $VETC/$AEC
  fi
elif [ ! "$HUAWEI" ] || [ "$ANGLER" ]; then
  cp -R customize/huawei/* $SYSTEM
  cp -R customize/vendor/* $VENDOR
  if [ "$64BIT" = "true" ]; then
    cp -R $CARM64/huawei/* $LIB64
    cp $CARM64/libomx-dts.so $VENDOR/lib/libomx-dts.so
    $SP $LIB/libaudio-custom.so 0 0 0644
    $SP $LIB/libaudioalgoservice_jni.so 0 0 0644
    $SP $LIB/libDoreso.so 0 0 0644
    $SP $LIB/libdts_hpx_service_c.so 0 0 0644
    $SP $LIB/libhpx-lite-sdk-thin-jni.so 0 0 0644
    $SP $LIB/libhuaweiaudioeffectutil.so 0 0 0644
    $SP $LIB/libhuaweiaudioalgoservice.so 0 0 0644
    $SP $LIB/libmax98925.so 0 0 0644
    $SP $LIB/libswsprocessing.so 0 0 0644
    $SP $LIB/libswsprocessing2.so 0 0 0644
    $SP $VENDOR/lib64/libomx-dts.so 0 0 0644
  fi
  $SPR $ETC/audio 0 0 0755 0644
  $SPR $ETC/dts 0 0 0755 0644
  $SPR $ETC/srs 0 0 0755 0644
  $SPR $ETC/sws 0 0 0755 0644
  $SP $VENDOR/framework 0 2000 0755
  $SP $VENDOR/framework/com.huawei.audioalgo.jar 0 0 0644
  $SP $BIN/dts_hpx_service 0 2000 0755
  $SP $LIB/libaudio-custom.so 0 0 0644
  $SP $LIB/libaudioalgoservice_jni.so 0 0 0644
  $SP $LIB/libDoreso.so 0 0 0644
  $SP $LIB/libdts_hpx_service_c.so 0 0 0644
  $SP $LIB/libhpx-lite-sdk-thin-jni.so 0 0 0644
  $SP $LIB/libhuaweiaudioeffectutil.so 0 0 0644
  $SP $LIB/libhuaweiaudioalgoservice.so 0 0 0644
  $SP $LIB/libhuaweiprocessing.so 0 0 0644
  $SP $LIB/libmax98925.so 0 0 0644
  $SP $LIB/libomni_directional_algoclient_jni.so 0 0 0644
  $SP $LIB/libswsprocessing.so 0 0 0644
  $SP $LIB/libswsprocessing2.so 0 0 0644
  $SP $LIB/libswsprocessing3.so 0 0 0644
  $SP $VENDOR/lib/libdts-eagle-shared.so 0 0 0644
  $SP $VENDOR/lib/libeaglecore.so 0 0 0644
  $SP $VENDOR/lib/libomx-dts.so 0 0 0644
  $SP $VENDOR/lib/libsta_lib_third_party_libsta_lib_libsta_gyp.so 0 0 0644
  $SP $VENDOR/lib/libsta_lib_third_party_staproxy_sta_proxy_loader_gyp.so 0 0 0644
  $SP $VENDOR/lib/libstlport_sta.so 0 0 0644
fi

if [ ! -d "$DRC" ]; then
  mkdir -p $DRC
  mkdir -p $SURR
  cp -R customize/etc/* $ETC
  cp -f $CARM/libdrc.so $VENDOR/lib/libdrc.so
  cp -f $CARM/libsurround_3mic_proc.so $VENDOR/lib/libsurround_3mic_proc.so
  $SPR $DRC 0 0 0755 0644
  $SPR $SURR 0 0 0755 0644
  $SP $VENDOR/lib/libdrc.so 0 0 0644
  $SP $VENDOR/lib/libsurround_3mic_proc.so 0 0 0644
fi

if [ -e "$QCOM" ]; then
  mkdir - $ASUSFX
  cp -R $CARM/asus/* $ASUSFX
  $SPR $ASUSFX 0 0 0755 0644
  if [ "$ARCH" = "arm64" ]; then
    mkdir -p $ASUSFX64
    cp -R $CARM64/asus/* $ASUSFX64
    $SPR $SFX64 0 0 0755 0644
  fi
  if [ ! "$SONY" ]; then
    mkdir -p $SONYFX
    cp -R $CARM/sony/* $SONYFX
    $SPR $SONYFX 0 0 0755 0644
    if [ "$ARCH" = "arm64" ]; then
      mkdir -p $SONYFX64
      cp -R $CARM64/sony/* $SONYFX64
      $SPR $SFX64 0 0 0755 0644
    fi
  fi
fi

if [ "$ARCH" = "x86" ]; then
  cp $CLIB86/libAudioPluginSuperpoweredSpatializer.so $LIB/libAudioPluginSuperpoweredSpatializer.so
  cp $CLIB86/libFrequencyDomain.so $LIB/libFrequencyDomain.so
  cp $CLIB86/libSuperpoweredLatency.so $LIB/libSuperpoweredLatency.so
  cp $CLIB86/libTarsosDSP.so $LIB/libTarsosDSP.so
  if [ "$ARCH" = "x64" ]; then
    cp $CLIB8664/libAudioPluginSuperpoweredSpatializer.so $LIB64/libAudioPluginSuperpoweredSpatializer.so
    cp $CLIB8664/libTarsosDSP.so $LIB64/libTarsosDSP.so
    $SP $LIB64/libAudioPluginSuperpoweredSpatializer.so 0 0 0644
    $SP $LIB64/libTarsosDSP.so 0 0 0644
  fi
else
  cp $CARM/libaudio-ftm.so $LIB/libaudio-ftm.so
  cp $CARM/libAudioPluginSuperpoweredSpatializer.so $LIB/libAudioPluginSuperpoweredSpatializer.so
  cp $CARM/libFrequencyDomain.so $LIB/libFrequencyDomain.so
  cp $CARM/libSuperpoweredLatency.so $LIB/libSuperpoweredLatency.so
  cp $CARM/libTarsosDSP.so $LIB/libTarsosDSP.so
  if [ "$ARCH" = "arm64" ]; then
    cp $CARM64/libaudioom.so $LIB64/libaudioom.so
    cp $CARM64/libAudioPluginSuperpoweredSpatializer.so $LIB64/libAudioPluginSuperpoweredSpatializer.so
    cp $CARM64/libsomcavextensionsimpl.so $LIB64/libsomcavextensionsimpl.so
    cp $CARM64/libsomcmediahttp.so $LIB64/libsomcmediahttp.so
    cp $CARM64/libstlport.so $LIB64/libstlport.so
    cp $CARM64/libstlport_shared.so $LIB64/libstlport_shared.so
    cp $CARM64/$SWS $LIB64/$SWS
    cp $CARM64/libTarsosDSP.so $LIB64/libTarsosDSP.so
    $SP $LIB64/libaudioom.so 0 0 0644
    $SP $LIB64/libAudioPluginSuperpoweredSpatializer.so 0 0 0644
    $SP $LIB64/libsomcavextensionsimpl.so 0 0 0644
    $SP $LIB64/libsomcmediahttp.so 0 0 0644
    $SP $LIB64/libstlport.so 0 0 0644
    $SP $LIB64/libstlport_shared.so 0 0 0644
    $SP $LIB64/libTarsosDSP.so 0 0 0644
  fi
fi

cp -R deuteronomy/* $SYS

if [ "$API" -ge "21" ]; then
  mkdir -p $APP/$ARK
  cp $CAPP/$ARKAPK $APP/$ARK/$ARKAPK
  cp $CSUD/$SERVER $SUD/$SERVER
  if [ "$ARCH" = "$x86" ] || [ "$ARCH" = "$x64" ]; then
    mkdir -p $V4A86
    cp $CAPP/$V4APK $PAPP/$V4A/$V4APK
    cp $CLIB86/$V4AUTIL $V4A86/$V4AUTIL
    cp $CLIB86/$V4AUTIL $LIB/$V4AUTIL
    cp $CLIB86/libv4a_fx_jb_X86.so $DEUTFX/$V4ALIB
  else
    mkdir -p $V4ARM
    cp $CAPP/$V4APK $PAPP/$V4A/$V4APK
    cp $CARM/$V4AUTIL $V4ARM/$V4AUTIL
    cp $CARM/$V4AUTIL $LIB/$V4AUTIL
    cp $CARM/libv4a_fx_jb_NEON.so $DEUTFX/$V4ALIB
  fi
  $SPR $APP/$ARK 0 0 0755 0644
  $SPR $PAPP/$V4A 0 0 0755 0644
  $SPR $SUD 0 0 0700 0700
  restorecon $SUD/$PROP
  restorecon $SUD/$SERVER
else
  cp $CAPP/$ARKAPK $APP/$ARKAPK
  cp $CAPP/$V4APK $APP/$V4APK
  if [ "$ARCH" = "$x86" ] || [ "$ARCH" = "$x64" ]; then
    cp $CLIB86/$V4AUTIL $LIB/$V4AUTIL
    cp $CLIB86/libv4a_fx_jb_X86.so $DEUTFX/$V4ALIB
  else
    cp $CARM/$V4AUTIL $LIB/$V4AUTIL
    cp $CARM/libv4a_fx_jb_NEON.so $DEUTFX/$V4ALIB
  fi
  $SP $APP/$ARKAPK 0 0 0644
  $SP $APP/$V4APK 0 0 0644
  $SPR $SUD 0 0 0700 0700
  restorecon $SUD/$PROP
fi

if [ "$PERMISSIVE" ]; then
  rm $SUD/$SERVER
  cp $CSUD/permissive $SUD/permissive
  $SP $SUD/permissive 0 0 0700
  restorecon $SUD/permissive
fi
    
$SPR $SFX 0 0 0755 0644
$SPR $FW 0 0 0755 0644
$SPR $PERM 0 0 0755 0644
$SPR $SYSTEM/usr/share/alsa 0 0 0755 0644
$SP $SYSTEM/ARISE_version.prop 0 0 0644
$SP $ETC/$AEC 0 0 0644
$SP $ETC/$AEV 0 0 0644
$SP $ETC/$HTC 0 0 0644
$SP $ETC/maxxaudio_default.mps 0 0 0644
$SP $VETC/$AEC 0 0 0644
$SP $VETC/$AOE 0 0 0644
$SP $LIB/AudioSphereModule.so 0 0 0644
$SP $LIB/DolbyMobileModule.so 0 0 0644
$SP $LIB/DolbySurroundModule.so 0 0 0644
$SP $LIB/DTS_HPX_MODULE.so 0 0 0644
$SP $LIB/SrsTruMediaModule.so 0 0 0644
$SP $LIB/libaudio-ftm.so 0 0 0644
$SP $LIB/libaudioom.so 0 0 0644
$SP $LIB/libAudioPluginSuperpoweredSpatializer.so 0 0 0644
$SP $LIB/libauroservice.so 0 0 0644
$SP $LIB/libauroservice_client.so 0 0 0644
$SP $LIB/libaurostat.so 0 0 0644
$SP $LIB/libFrequencyDomain.so 0 0 0644
$SP $LIB/libgnustl_shared.so 0 0 0644
$SP $LIB/libharman.so 0 0 0644
$SP $LIB/libiss_svc.so 0 0 0644
$SP $LIB/libMAM2-wavesfx-Coretex_A9.so 0 0 0644
$SP $LIB/libmars-audioparams.so 0 0 0644
$SP $LIB/libmars-featureclient.so 0 0 0644
$SP $LIB/libmars-service.so 0 0 0644
$SP $LIB/libmars-service_jni.so 0 0 0644
$SP $LIB/libmaxxaudio_jni.so 0 0 0644
$SP $LIB/libmsc.so 0 0 0644
$SP $LIB/libmwsound.so 0 0 0644
$SP $LIB/libosl-maxxaudio-itf.so 0 0 0644
$SP $LIB/libsomcavextensionsimpl.so 0 0 0644
$SP $LIB/libsomcmediahttp.so 0 0 0644
$SP $LIB/libSpectrum.so 0 0 0644
$SP $LIB/libSpectrum_jni.so 0 0 0644
$SP $LIB/libstagefright_soft_dsddec.so 0 0 0644
$SP $LIB/libstagefright_soft_lddpdec.so 0 0 0644
$SP $LIB/libstagefright_soft_pcmdec.so 0 0 0644
$SP $LIB/libstagefright_soft_somcalacdec.so 0 0 0644
$SP $LIB/libstagefright_soft_somcdsddec.so 0 0 0644
$SP $LIB/libstlport.so 0 0 0644
$SP $LIB/libstlport_sh_521.so 0 0 0644
$SP $LIB/libstlport_shared.so 0 0 0644
$SP $LIB/libSuperpoweredLatency.so 0 0 0644
$SP $LIB/libsurround_proc.so 0 0 0644
$SP $LIB/libTarsosDSP.so 0 0 0644
$SP $LIB/$V4AUTIL 0 0 0644
$SP $LIB/libval_2.0.so 0 0 0644
$SP $LIB/libval_common.so 0 0 0644

if [ -d "/vendor" ]; then
  umount /vendor
fi

#if [ -f "$WISHLIST" ]; then
#  cp arise_addon.prop $WISHLIST
#fi

rm -rf $ARISE

cd /sdcard

if [ -e "$PROP" ]; then
  cp $PROP $SUD/$PROP
  $SP $SUD/$PROP 0 0 0700
  restorecon $SUD/$PROP
fi

ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print "               www.arisesound.com"
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "
ui_print " "

umount /system

sleep 2

exit 0

